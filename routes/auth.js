const express = require("express");
const bcrypt = require("bcryptjs");   // –¥–ª—è —Ö–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—ñ–≤
const jwt = require("jsonwebtoken");  // –¥–ª—è —Ç–æ–∫–µ–Ω—ñ–≤
const db = require("../config/db");   // –Ω–∞—à–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL

const router = express.Router();

// üîë –†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è
router.post("/register", async (req, res) => {
  const { username, email, password } = req.body;

  if (!username || !email || !password) {
    return res.status(400).json({ message: "–í—Å—ñ –ø–æ–ª—è –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ" });
  }

  // —Ö–µ—à—É–≤–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è
  const hashedPassword = await bcrypt.hash(password, 10);

  db.query(
    "INSERT INTO users (username, email, password) VALUES (?, ?, ?)",
    [username, email, hashedPassword],
    (err) => {
      if (err) {
        console.error(err);
        return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó" });
      }
      res.json({ message: "‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ" });
    }
  );
});

// üîë –õ–æ–≥—ñ–Ω
router.post("/login", (req, res) => {
  const { email, password } = req.body;

  db.query("SELECT * FROM users WHERE email = ?", [email], async (err, results) => {
    if (err) return res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    if (results.length === 0) return res.status(400).json({ message: "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });

    const user = results[0];

    // –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: "‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å" });

    // —Å—Ç–≤–æ—Ä—é—î–º–æ —Ç–æ–∫–µ–Ω
    const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET, {
      expiresIn: "1h",
    });

    res.json({ message: "‚úÖ –õ–æ–≥—ñ–Ω —É—Å–ø—ñ—à–Ω–∏–π", token });
  });
});

module.exports = router;
